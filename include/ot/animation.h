#pragma once

#ifndef __INTERGEN_GENERATED__animation_H__
#define __INTERGEN_GENERATED__animation_H__

//@file Interface file for animation interface generated by intergen
//See LICENSE file for copyright and license information

#include <comm/commexception.h>
#include <comm/intergen/ifc.h>


namespace pkg {
    class animation;
}

namespace ot {

////////////////////////////////////////////////////////////////////////////////
class animation
    : public intergen_interface
{
public:

    // --- interface methods ---

    // --- creators ---

    static iref<animation> get( const coid::token& filename, const coid::token& root, unsigned int frame_offset ) {
        return get<animation>(0, filename, root, frame_offset);
    }

    template<class T>
    static iref<T> get( T* _subclass_, const coid::token& filename, const coid::token& root, unsigned int frame_offset );

    // --- internal helpers ---

    virtual ~animation() {
        if (_cleaner) _cleaner(this,0);
    }

    static const int HASHID = 1462032193;

    int intergen_hash_id() const override final { return HASHID; }

    bool iface_is_derived( int hash ) const override final {
        return hash == HASHID;
    }

    const coid::tokenhash& intergen_interface_name() const override final {
        static const coid::tokenhash _name = "ot::animation";
        return _name;
    }

    static const coid::token& intergen_default_creator_static( EBackend bck ) {
        static const coid::token _dc("");
        static const coid::token _djs("ot::js::animation@wrapper");
        static const coid::token _dlua("ot::lua::animation@wrapper");
        static const coid::token _dnone;

        switch(bck) {
        case IFC_BACKEND_CXX: return _dc;
        case IFC_BACKEND_JS:  return _djs;
        case IFC_BACKEND_LUA: return _dlua;
        default: return _dnone;
        }
    }


    template<enum EBackend B>
    static void* intergen_wrapper_cache() {
        static void* _cached_wrapper=0;
        if (!_cached_wrapper) {
            const coid::token& tok = intergen_default_creator_static(B);
            _cached_wrapper = coid::interface_register::get_interface_creator(tok);
        }
        return _cached_wrapper;
    }

    void* intergen_wrapper( EBackend bck ) const override final {
        switch(bck) {
        case IFC_BACKEND_JS: return intergen_wrapper_cache<IFC_BACKEND_JS>();
        case IFC_BACKEND_LUA: return intergen_wrapper_cache<IFC_BACKEND_LUA>();
        default: return 0;
        }
    }

    EBackend intergen_backend() const override { return IFC_BACKEND_CXX; }

    const coid::token& intergen_default_creator( EBackend bck ) const override final {
        return intergen_default_creator_static(bck);
    }

protected:

    typedef void (*cleanup_fn)(animation*, intergen_interface*);
    cleanup_fn _cleaner;

    animation() : _cleaner(0)
    {}
};

////////////////////////////////////////////////////////////////////////////////
template<class T>
inline iref<T> animation::get( T* _subclass_, const coid::token& filename, const coid::token& root, unsigned int frame_offset )
{
    typedef iref<T> (*fn_creator)(animation*, const coid::token&, const coid::token&, unsigned int);

    static fn_creator create = 0;
    static const coid::token ifckey = "ot::animation.get@1462032193";

    if (!create)
        create = reinterpret_cast<fn_creator>(
            coid::interface_register::get_interface_creator(ifckey));

    if (!create)
        throw coid::exception("interface creator inaccessible: ") << ifckey;

    return create(_subclass_, filename, root, frame_offset);
}

#pragma warning(push)
#pragma warning(disable : 4191)

#pragma warning(pop)

} //namespace

#endif //__INTERGEN_GENERATED__animation_H__
