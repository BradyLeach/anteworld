#pragma once

#ifndef __INTERGEN_GENERATED__aircraft_H__
#define __INTERGEN_GENERATED__aircraft_H__

//@file Interface file for aircraft interface generated by intergen
//See LICENSE file for copyright and license information

//host class: ::jsbsim_plane

#include <comm/commexception.h>
#include <comm/intergen/ifc.h>
#include "object.h"
#include <ot/object.h>
#include <ot/geomob.h>
#include <ot/jsb.h>
#include <ot/sndgrp.h>
#include <ot/vehicle_cfg.h>
#include <ot/explosion_params.h>
#include <ot/aircraft_physics.h>

class jsbsim_plane;


namespace ot {

////////////////////////////////////////////////////////////////////////////////
///
/// AI CONTROL INTERFACE ///////////////////////////////////////////////////
///
class aircraft
    : public ot::object
{
public:

    // --- interface methods ---

    ot::EObjectType type() const;

    //@return unique object id
    uint id() const;

    void* get_custom_data() const;

    void set_custom_data( void* p );

    uint get_editor_id() const;

    void set_editor_id( uint id );

    ///Set collision group and mask
    void set_collision_group( uint group, uint mask );

    ///Get collision group and mask
    //@param mask optional mask value
    //@return collision group id
    uint get_collision_group( ifc_out uint* mask ) const;

    void* get_pkg_geomob() const;

    coid::token get_objurl() const;

    
    bool get_objdef_info( ifc_out ot::pkginfo::objdef& info ) const;

    const double3& get_pos() const;

    void set_pos( const double3& pos, bool commit = true );

    const quat& get_rot() const;

    void set_rot( const quat& rot );

    ///Set position and rotation
    void set_pos_rot( const double3& pos, const quat& rot );

    ///Get full positional data (with velocities)
    //@return 0 if object not ready (no data returned), >0 if ready and active, <0 if sleeping
    int get_positional_data( ot::dynamic_pos& data ) const;

    ///Set full positional data (with velocities)
    //@return 0 if object not ready and the position could not be set, else ok
    int set_positional_data( const ot::dynamic_pos& data );

    ///Update object in cache, change to permanent if necessary
    void commit();

    ///Set FPS camera model-space offset and initial rotation
    //@param pos offset position, relative to the object or bone
    //@param rot rotation from default camera orientation (model -z forward, +y up)
    //@param head_sim true if head movement should be simulated
    //@param cam_enabled true if camera rotation controls are enabled
    //@param joint_id bone id to attach to
    void set_fps_camera( const float3& pos, const quat& rot, bool head_sim = true, bool cam_enabled = true, uint joint_id = UMAX32 );

    //@return current FPS camera position
    float3 get_fps_camera_pos() const;

    //@return heading/pitch/roll angles of the object in radians
    float3 heading_pitch_roll() const;

    //@param id 0 the main body
    iref<ot::geomob> get_geomob( int id );

    //@return ot::jsb interface to JSBSim instance
    iref<ot::jsb> jsb();

    void set_engine_throttle( float throttle, int engine = -1 );

    ///Enter the vehicle with preferred camera mode
    //@return current camera mode
    ot::ECameraMode enter( ot::ECameraMode camode = ot::CamPrevious, ot::EControlsBinding bindio = ot::BindControls );

    ///Return camera control to UFO controller
    void exit();

    //@return current camera mode or seat (negative values), or ot::CamFree if camera isn't bound to this object
    ot::ECameraMode get_camera_mode() const;

    ///Fetch input controls data captured when vehicle was entered with ot::BindCapture
    //@param buf captured input controls data
    //@param append true if data should be appended into the buffer, false for swap/set
    //@note performs a buffer swap with internal controls buffer, keep using the same buffer to avoid unnecessary allocations
    void fetch_controls( ifc_out coid::dynarray<int32>& buf, bool append );

    ///Apply input controls data
    //@param cmd input command array pointer returned from fetch_controls
    //@param ncmds number of commands in the array
    void apply_controls( const int32* cmd, uint ncmds );

    ///Pause/unpause simulation
    void pause( bool p );

    ///Remove from the scene
    void remove_from_scene();

    /// show/hide whole geom object
    void set_visible( bool visible );

    //@return true if the object is visible
    bool is_visible() const;

    //@return true if the geom is fully loaded
    bool is_ready() const;

    //@return true if the object is persistent in the world
    bool is_persistent() const;

    //@return true if script loading failed and aircraft can't get into the ready state
    bool is_script_error() const;

    iref<ot::aircraft_physics> physics_interface() const;

    
    ///Invoke ext_param script method with name and value arguments
    //@return true if ext_param script event exists
    bool set_ext_param( const coid::token& name, float value );

    ///Invoke ext_param script method with name, querying the value
    //@return true if ext_param script event exists
    bool get_ext_param( const coid::token& name, ifc_out float& value );

    ///Apply extra force
    //@param mpos model-space postion to act on
    //@param force model or world-space force vector
    //@param worldspace true for world-space, false for model-space force vector
    void extra_force( const float3& mpos, const float3& force, bool worldspace = false );

    ///Apply extra force impulse (force * dt)
    //@param mpos model-space postion to act on
    //@param impulse model or world-space force impulse vector
    //@param worldspace true for world-space, false for model-space force vector
    void extra_impulse( const float3& mpos, const float3& impulse, bool worldspace = false );

    //@return current offset from model pivot to center of mass
    float3 com_offset() const;

    //@return the underlying physics rigid body object, if any (cast to btRigidBody*)
    btCollisionObject* collision_object() const;

    // --- creators ---

    static iref<aircraft> _get_control( jsbsim_plane* p ) {
        return _get_control<aircraft>(0, p);
    }

    template<class T>
    static iref<T> _get_control( T* _subclass_, jsbsim_plane* p );

    ///Instantiate a new aircraft object
    //@param objpath path to objdef within packages
    static iref<aircraft> create( const coid::token& objpath, const double3& pos, const quat& rot ) {
        return create<aircraft>(0, objpath, pos, rot);
    }

    template<class T>
    static iref<T> create( T* _subclass_, const coid::token& objpath, const double3& pos, const quat& rot );

    /// all initial condition will be computed from parent jsbsim object
    //@param child_id child entity ID has to point to a child geom of a jsbsim object
    static iref<aircraft> create_from_geom( coid::uint child_id ) {
        return create_from_geom<aircraft>(0, child_id);
    }

    template<class T>
    static iref<T> create_from_geom( T* _subclass_, coid::uint child_id );

    // --- internal helpers ---

    ///Interface revision hash
    static const int HASHID = 2807364154;

    ///Interface name (full ns::class string)
    static const coid::tokenhash& IFCNAME() {
        static const coid::tokenhash _name = "ot::aircraft";
        return _name;
    }

    int intergen_hash_id() const override final { return HASHID; }

    bool iface_is_derived( int hash ) const override final {
        return hash == HASHID || ot::object::iface_is_derived(hash);
    }

    const coid::tokenhash& intergen_interface_name() const override final {
        return IFCNAME();
    }

    static const coid::token& intergen_default_creator_static( EBackend bck ) {
        static const coid::token _dc("");
        static const coid::token _djs("ot::aircraft@wrapper.js");
        static const coid::token _djsc("ot::aircraft@wrapper.jsc");
        static const coid::token _dlua("ot::aircraft@wrapper.lua");
        static const coid::token _dnone;

        switch(bck) {
        case IFC_BACKEND_CXX: return _dc;
        case IFC_BACKEND_JS:  return _djs;
        case IFC_BACKEND_JSC:  return _djsc;
        case IFC_BACKEND_LUA: return _dlua;
        default: return _dnone;
        }
    }

    //@return cached active interface of given host class
    //@note host side helper
    static iref<aircraft> intergen_active_interface(::jsbsim_plane* host);

    template<enum EBackend B>
    static void* intergen_wrapper_cache() {
        static void* _cached_wrapper=0;
        if (!_cached_wrapper) {
            const coid::token& tok = intergen_default_creator_static(B);
            _cached_wrapper = coid::interface_register::get_interface_creator(tok);
        }
        return _cached_wrapper;
    }

    void* intergen_wrapper( EBackend bck ) const override final {
        switch(bck) {
        case IFC_BACKEND_JS: return intergen_wrapper_cache<IFC_BACKEND_JS>();
        case IFC_BACKEND_JSC: return intergen_wrapper_cache<IFC_BACKEND_JSC>();
        case IFC_BACKEND_LUA: return intergen_wrapper_cache<IFC_BACKEND_LUA>();
        default: return 0;
        }
    }

    EBackend intergen_backend() const override { return IFC_BACKEND_CXX; }

    const coid::token& intergen_default_creator( EBackend bck ) const override final {
        return intergen_default_creator_static(bck);
    }

    ///Client registrator
    template<class C>
    static int register_client()
    {
        static_assert(std::is_base_of<aircraft, C>::value, "not a base class");

        typedef iref<intergen_interface> (*fn_client)(void*, intergen_interface*);
        fn_client cc = [](void*, intergen_interface*) -> iref<intergen_interface> { return new C; };

        coid::token type = typeid(C).name();
        type.consume("class ");
        type.consume("struct ");

        coid::charstr tmp = "ot::aircraft";
        tmp << "@client-2807364154" << '.' << type;

        coid::interface_register::register_interface_creator(tmp, cc);
        return 0;
    }

protected:

    static coid::comm_mutex& share_lock() {
        static coid::comm_mutex _mx(500, false);
        return _mx;
    }

    typedef void (*cleanup_fn)(aircraft*, intergen_interface*);
    cleanup_fn _cleaner;

    ~aircraft() {
        VT_CALL(void,(),0)();
        if (_cleaner)
            _cleaner(this, 0);
    }

    aircraft() : _cleaner(0)
    {}
};

////////////////////////////////////////////////////////////////////////////////
template<class T>
inline iref<T> aircraft::_get_control( T* _subclass_, jsbsim_plane* p )
{
    typedef iref<T> (*fn_creator)(aircraft*, jsbsim_plane*);

    static fn_creator create = 0;
    static const coid::token ifckey = "ot::aircraft._get_control@2807364154";

    if (!create)
        create = reinterpret_cast<fn_creator>(
            coid::interface_register::get_interface_creator(ifckey));

    if (!create) {
        log_mismatch("_get_control", "ot::aircraft._get_control", "@2807364154");
        return 0;
    }

    return create(_subclass_, p);
}

////////////////////////////////////////////////////////////////////////////////
template<class T>
inline iref<T> aircraft::create( T* _subclass_, const coid::token& objpath, const double3& pos, const quat& rot )
{
    typedef iref<T> (*fn_creator)(aircraft*, const coid::token&, const double3&, const quat&);

    static fn_creator create = 0;
    static const coid::token ifckey = "ot::aircraft.create@2807364154";

    if (!create)
        create = reinterpret_cast<fn_creator>(
            coid::interface_register::get_interface_creator(ifckey));

    if (!create) {
        log_mismatch("create", "ot::aircraft.create", "@2807364154");
        return 0;
    }

    return create(_subclass_, objpath, pos, rot);
}

////////////////////////////////////////////////////////////////////////////////
template<class T>
inline iref<T> aircraft::create_from_geom( T* _subclass_, coid::uint child_id )
{
    typedef iref<T> (*fn_creator)(aircraft*, coid::uint);

    static fn_creator create = 0;
    static const coid::token ifckey = "ot::aircraft.create_from_geom@2807364154";

    if (!create)
        create = reinterpret_cast<fn_creator>(
            coid::interface_register::get_interface_creator(ifckey));

    if (!create) {
        log_mismatch("create_from_geom", "ot::aircraft.create_from_geom", "@2807364154");
        return 0;
    }

    return create(_subclass_, child_id);
}

#pragma warning(push)
#pragma warning(disable : 4191)

inline ot::EObjectType aircraft::type() const
{ return VT_CALL(ot::EObjectType,() const,1)(); }

inline uint aircraft::id() const
{ return VT_CALL(uint,() const,2)(); }

inline void* aircraft::get_custom_data() const
{ return VT_CALL(void*,() const,3)(); }

inline void aircraft::set_custom_data( void* p )
{ return VT_CALL(void,(void*),4)(p); }

inline uint aircraft::get_editor_id() const
{ return VT_CALL(uint,() const,5)(); }

inline void aircraft::set_editor_id( uint id )
{ return VT_CALL(void,(uint),6)(id); }

inline void aircraft::set_collision_group( uint group, uint mask )
{ return VT_CALL(void,(uint,uint),7)(group,mask); }

inline uint aircraft::get_collision_group( uint* mask ) const
{ return VT_CALL(uint,(uint*) const,8)(mask); }

inline void* aircraft::get_pkg_geomob() const
{ return VT_CALL(void*,() const,9)(); }

inline coid::token aircraft::get_objurl() const
{ return VT_CALL(coid::token,() const,10)(); }

inline bool aircraft::get_objdef_info( ot::pkginfo::objdef& info ) const
{ return VT_CALL(bool,(ot::pkginfo::objdef&) const,11)(info); }

inline const double3& aircraft::get_pos() const
{ return VT_CALL(const double3&,() const,12)(); }

inline void aircraft::set_pos( const double3& pos, bool commit )
{ return VT_CALL(void,(const double3&,bool),13)(pos,commit); }

inline const quat& aircraft::get_rot() const
{ return VT_CALL(const quat&,() const,14)(); }

inline void aircraft::set_rot( const quat& rot )
{ return VT_CALL(void,(const quat&),15)(rot); }

inline void aircraft::set_pos_rot( const double3& pos, const quat& rot )
{ return VT_CALL(void,(const double3&,const quat&),16)(pos,rot); }

inline int aircraft::get_positional_data( ot::dynamic_pos& data ) const
{ return VT_CALL(int,(ot::dynamic_pos&) const,17)(data); }

inline int aircraft::set_positional_data( const ot::dynamic_pos& data )
{ return VT_CALL(int,(const ot::dynamic_pos&),18)(data); }

inline void aircraft::commit()
{ return VT_CALL(void,(),19)(); }

inline void aircraft::set_fps_camera( const float3& pos, const quat& rot, bool head_sim, bool cam_enabled, uint joint_id )
{ return VT_CALL(void,(const float3&,const quat&,bool,bool,uint),20)(pos,rot,head_sim,cam_enabled,joint_id); }

inline float3 aircraft::get_fps_camera_pos() const
{ return VT_CALL(float3,() const,21)(); }

inline float3 aircraft::heading_pitch_roll() const
{ return VT_CALL(float3,() const,22)(); }

inline iref<ot::geomob> aircraft::get_geomob( int id )
{ return VT_CALL(iref<ot::geomob>,(int),23)(id); }

inline iref<ot::jsb> aircraft::jsb()
{ return VT_CALL(iref<ot::jsb>,(),24)(); }

inline void aircraft::set_engine_throttle( float throttle, int engine )
{ return VT_CALL(void,(float,int),25)(throttle,engine); }

inline ot::ECameraMode aircraft::enter( ot::ECameraMode camode, ot::EControlsBinding bindio )
{ return VT_CALL(ot::ECameraMode,(ot::ECameraMode,ot::EControlsBinding),26)(camode,bindio); }

inline void aircraft::exit()
{ return VT_CALL(void,(),27)(); }

inline ot::ECameraMode aircraft::get_camera_mode() const
{ return VT_CALL(ot::ECameraMode,() const,28)(); }

inline void aircraft::fetch_controls( coid::dynarray<int32>& buf, bool append )
{ return VT_CALL(void,(coid::dynarray<int32>&,bool),29)(buf,append); }

inline void aircraft::apply_controls( const int32* cmd, uint ncmds )
{ return VT_CALL(void,(const int32*,uint),30)(cmd,ncmds); }

inline void aircraft::pause( bool p )
{ return VT_CALL(void,(bool),31)(p); }

inline void aircraft::remove_from_scene()
{ return VT_CALL(void,(),32)(); }

inline void aircraft::set_visible( bool visible )
{ return VT_CALL(void,(bool),33)(visible); }

inline bool aircraft::is_visible() const
{ return VT_CALL(bool,() const,34)(); }

inline bool aircraft::is_ready() const
{ return VT_CALL(bool,() const,35)(); }

inline bool aircraft::is_persistent() const
{ return VT_CALL(bool,() const,36)(); }

inline bool aircraft::is_script_error() const
{ return VT_CALL(bool,() const,37)(); }

inline iref<ot::aircraft_physics> aircraft::physics_interface() const
{ return VT_CALL(iref<ot::aircraft_physics>,() const,38)(); }

inline bool aircraft::set_ext_param( const coid::token& name, float value )
{ return VT_CALL(bool,(const coid::token&,float),39)(name,value); }

inline bool aircraft::get_ext_param( const coid::token& name, float& value )
{ return VT_CALL(bool,(const coid::token&,float&),40)(name,value); }

inline void aircraft::extra_force( const float3& mpos, const float3& force, bool worldspace )
{ return VT_CALL(void,(const float3&,const float3&,bool),41)(mpos,force,worldspace); }

inline void aircraft::extra_impulse( const float3& mpos, const float3& impulse, bool worldspace )
{ return VT_CALL(void,(const float3&,const float3&,bool),42)(mpos,impulse,worldspace); }

inline float3 aircraft::com_offset() const
{ return VT_CALL(float3,() const,43)(); }

inline btCollisionObject* aircraft::collision_object() const
{ return VT_CALL(btCollisionObject*,() const,44)(); }

#pragma warning(pop)

} //namespace

#endif //__INTERGEN_GENERATED__aircraft_H__
